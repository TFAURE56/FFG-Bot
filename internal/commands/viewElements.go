package commands

import (
	"FFG-Bot/internal/global"
	"log"
	"strconv"
	"strings"

	"github.com/bwmarrin/discordgo"
)

func init() {
	Register(&discordgo.ApplicationCommand{
		Name:        "viewelements",
		Description: "Voir les √©l√©ments possibles pour les orders",
	}, viewElementsHandler)
}

func viewElementsHandler(s *discordgo.Session, i *discordgo.InteractionCreate) {
	if i.ApplicationCommandData().Name != "viewelements" {
		return
	}

	db, err := global.ConnectToDatabase()
	if err != nil {
		log.Println("Erreur de connexion √† la base de donn√©es :", err)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{
				Content: "‚ùå Erreur de connexion √† la base de donn√©es.",
			},
		})
		return
	}
	defer db.Close()

	rows, err := db.Query("SELECT name, price, money, enable FROM elements")
	if err != nil {
		log.Println("Erreur lors de la r√©cup√©ration des √©l√©ments :", err)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{
				Content: "‚ùå Une erreur est survenue lors de la r√©cup√©ration des √©l√©ments.",
			},
		})
		return
	}

	defer rows.Close()

	var elements []string
	for rows.Next() {
		var name string
		var money string
		var price int
		var enable bool
		if err := rows.Scan(&name, &price, &money, &enable); err != nil {
			log.Println("Erreur lors du scan des √©l√©ments :", err)
			continue
		}

		// Si l'√©l√©ment n'est pas activ√©, ajouter (D√©sactiv√©) √† son nom
		if !enable {
			elements = append(elements, "‚≠ï "+name+" : "+strconv.Itoa(price)+" "+money)
		} else {
			elements = append(elements, "‚úîÔ∏è "+name+" : "+strconv.Itoa(price)+" "+money)
		}
	}

	if len(elements) == 0 {

		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{
				Content: "‚ÑπÔ∏è Aucun √©l√©ment disponible pour le moment.",
			},
		})
		return
	}

	responseMessage := "# **üìú Liste des √©l√©ments disponibles pour les orders :**\n\n" +
		"\n " +
		"```\n" +
		strings.Join(elements, "\n") + " ``` \n" +
		"-# ‚≠ï : √âlement non disponible pour le moment"

	s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
		Type: discordgo.InteractionResponseChannelMessageWithSource,
		Data: &discordgo.InteractionResponseData{
			Content: responseMessage,
		},
	})
}
